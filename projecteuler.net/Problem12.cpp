/*
	Patrick Emami
	Problem 12

	The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

	1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

	Let us list the factors of the first seven triangle numbers:

	 1: 1
	 3: 1,3
	 6: 1,2,3,6
	10: 1,2,5,10
	15: 1,3,5,15
	21: 1,3,7,21
	28: 1,2,4,7,14,28
	We can see that 28 is the first triangle number to have over five divisors.

	What is the value of the first triangle number to have over five hundred divisors?
*/

#include <iostream>
#include "math.h"

using namespace std; 

//Calculates the number of divisors of integer n
int numOfDivisors(long long int n) {
        if( n == 1 ) 
	        return 1;
	else if( n <= 3 ) 
	        return 2; 

        long long int num = n, i = 2, size = sqrt(n), lastPrime = 0;
        int numberOfDivisors = 1, index = -1; 

	if( n <= 100 )
	        size += 10;
	else
	        size += (size/2);

	int frequencyOfPrimes[size]; 
        bool factors[size];

	for(long long int k = 0; k <= size; k++) {
	  	         frequencyOfPrimes[k] = 0;
	        if(k > 1)
		         factors[k] = 0;
		else
		         factors[k] = 1; 	 		
	}

	while( i <= size) {
	        if( (num % i) != 0 ) {
			for(long long int j = 1; i*j <= size; j++) 
				factors[i*j] = 1; 					   
		}
		else {	     
		        if( i != lastPrime ) {			         
			        index++; 
			        lastPrime = i; 
		        }
			frequencyOfPrimes[index]++;
			if( i == n || i == size || (i == num && i != n )) {
			        for(long long int m = 0; m <= index; m++)
			                numberOfDivisors *= (frequencyOfPrimes[m]+1); 
				return numberOfDivisors;
			}
			num /= i; 		
		}
		//find next candidate 
		while(factors[i] == 1) {
		        if(i == size && num != n) {
			        if( i != lastPrime ) {
				        index++;
		  	                lastPrime = i; 					 
		                }
				frequencyOfPrimes[index]++; 
				for(long long int l = 0; l <= index; l++)
			                numberOfDivisors *= (frequencyOfPrimes[l]+1); 
				return numberOfDivisors;					
			}
			else if( i == size ) {	 
			        for(long long int r = 0; r <= index; r++)
			               numberOfDivisors *= (frequencyOfPrimes[r]+1); 
				return numberOfDivisors;	
			}
		        i++;
		}
	}
}

//Finds the first triangular number with over 500 divisors
long long int solution() {
        bool check = true; 
	long long int triangular = 0, maxD = 0, maxT = 0; 
	long long int increment = 1;
	long long int numDivisors = 0; 
		
	while(check) {
		//calculate the next triangular number {1, 3, 6, 10, ...}
		triangular += increment; 
		increment++; 	       
	     	
		numDivisors = numOfDivisors(triangular);		
				
		if( numDivisors > maxD ) {
		           maxD = numDivisors;
	          	   maxT = triangular; 
		}
		if( maxD > 500) 
		           return maxT; 					  
		numDivisors = 0; 			
	}			 
	return -1;  
}
	
int main() {  	
  cout << solution() << endl;  
  return 0; 
}
